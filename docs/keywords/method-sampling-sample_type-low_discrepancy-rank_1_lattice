Blurb::
Uses rank-1 lattice points to sample variables

Description::
The ``rank_1_lattice`` keyword invokes rank-1 lattice sampling as the means of 
drawing samples of uncertain variables according to their probability
distributions :cite:p:`Nuyens06`. An :math:`N`-point rank-1 lattice rule in 
:math:`s` dimensions generates points according to


.. math:: \boldsymbol{t}_n = \left\{ \frac{n \boldsymbol{z}}{N} \right} = \frac{n \boldsymbol{z} \text{mod} N}{N}

where :math:`\{\;\cdot\;\}` denotes the fractional part, i.e., 
:math:`\{x\} = x - \lceil x \rceil`, and where 
:math:`\boldsymbol{z} = (z_1, z_2, \ldots, z_s)` is an :math:`s`-dimensional 
vector with integers, called the generating vector.

The performance of the rank-1 lattice points depends on the choice of 
generating vector. Dakota provides two predefined generating vectors:
- :dakkw:`cools_kuo_nuyens` (default): generates up to ``2^20`` points in up to ``250`` dimensions :cite:p:`Cools06`
- :dakkw:`kuo`: generates up to ``2^20`` points in up to ``3600`` dimensions :cite:p:`Kuo06`

If this is not sufficient, you can provide a custom generating vector 
either as an :dakkw:`inline` argument, or using an external :dakkw:`file`. 
Custom generating vectors can be found online :cite:p:`Kuo06`, or they can be generated using the
fast *component-by-component* construction from :cite:p:`Nuyens`.
In this case, the user must specify the ``log2`` of the maximum number of points in the 
lattice using the keyword :dakkw:`m_max`.

By default, the lattice points will be shifted using a random shift vector.
This means that the points will be generated according to


.. math:: \boldsymbol{t}_n = \left\{ \frac{n \boldsymbol{z}}{N} + \Delta \right}

where :math:`\Delta` is a vector with standard uniform random points. 
If this is not the desired behavior, specify the keyword :dakkw:`no_random_shift`
(**warning**: this means that the first, untransformed, point in the sequence will be 
:math:`\boldsymbol{t}_0 = (0, 0, \ldots, 0)` -- this may or may not be the desired behavior :cite:p:`Owen20`.)

The default behavior is to return points using radical inverse ordering, i.e., 
the points will be generated according to


.. math:: \boldsymbol{t}_n = \left\{ \phi_b(n) \boldsymbol{z} \right}

where :math:`\phi_b(n)` denotes the so-called *radical inverse* function in base :math:`b` (usually, and in Dakota, :math:`b = 2`). 
This function transforms a number :math:`x = (\hdots, x_2x_1)_b` in its base-:math:`b` representation 
to :math:`\phi_b(x) = (0.x_1x_2\hdots)_b`. Note that the above expression agrees with original 
formulation when :math:`N = b^m` for any :math:`m \geq 0`. The advantage of the latter formulation is that one can 
generate an arbitrary number of points :math:`N`. Use the keyword :dakkw:`ordering` to choose the ordering of the point set.

Topics::

Examples::

.. code-block::

    method
      sampling
        sample_type low_discrepancy
          rank_1_lattice


Theory::

Faq::

See_Also::
